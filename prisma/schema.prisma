generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model cron_job {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String        @db.VarChar(255)
  frequency       String        @db.VarChar(255)
  timing          String        @db.VarChar(255)
  parameters      String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invite {
  id                           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                       String        @db.VarChar(255)
  inviter_id                   String?       @db.Uuid
  invitee_id                   String?       @db.Uuid
  organization_id              String?       @db.Uuid
  created_at                   DateTime      @default(now()) @db.Timestamp(6)
  updated_at                   DateTime      @default(now()) @db.Timestamp(6)
  user_invite_invitee_idTouser user?         @relation("invite_invitee_idTouser", fields: [invitee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invite_inviter_idTouser user?         @relation("invite_inviter_idTouser", fields: [inviter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization                 organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  cron_job    cron_job[]
  invite      invite[]
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String      @db.VarChar(255)
  user_id    String?     @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  user       user?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_role  user_role[]
}

model user {
  id                             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                          String         @unique @db.VarChar(255)
  firstName                      String?        @db.VarChar(255)
  lastName                       String?        @db.VarChar(255)
  roq_user_id                    String         @db.VarChar(255)
  tenant_id                      String         @db.VarChar(255)
  created_at                     DateTime       @default(now()) @db.Timestamp(6)
  updated_at                     DateTime       @default(now()) @db.Timestamp(6)
  invite_invite_invitee_idTouser invite[]       @relation("invite_invitee_idTouser")
  invite_invite_inviter_idTouser invite[]       @relation("invite_inviter_idTouser")
  organization                   organization[]
  role                           role[]
  user_role                      user_role[]
}

model user_role {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @db.Uuid
  role_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  role       role?    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
